#!/bin/bash
set -vx

#NODE_VERSION=$(echo $DOCKER_TAG | cut -d "-" -f2)
QEMUVER=$(echo $DOCKER_TAG)
DockerServerVersion=$(docker info --format '{{.ServerVersion}}')
DockerSxperimental=$(docker info --format '{{.ExperimentalBuild}}')

#https://stackoverflow.com/questions/60080264/docker-cannot-build-multi-platform-images-with-docker-buildx
#https://github.com/docker/buildx#installing
###export DOCKER_BUILDKIT=1
##export DOCKER_BUILDKIT=1
#docker build --platform=local -o . git://github.com/docker/buildx
##docker build -o . git://github.com/docker/buildx

curl -# -L --head https://github.com/docker/buildx/releases/download/v0.4.1/buildx-v0.4.1.linux-amd64 -o buildx
mkdir -p ~/.docker/cli-plugins
mv buildx ~/.docker/cli-plugins/docker-buildx
chmod 755 ~/.docker/cli-plugins/docker-buildx

#docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
##docker build --no-cache --progress=plain
#docker buildx rm builder
#docker buildx create --name builder --driver docker-container --use
#docker buildx inspect --bootstrap
#docker buildx ls

  # Instantiate docker buildx builder with multi-architecture support.
  ###export DOCKER_CLI_EXPERIMENTAL=enabled
  docker -v
  docker --help || docker -h
  docker version
  docker buildx create --name mybuilder
  docker buildx use mybuilder
  # Start up buildx and verify that all is OK.
  docker buildx inspect --bootstrap

if [ $DOCKER_TAG == "latest" ]
then
  #docker build . --build-arg QEMUVER=${DOCKER_TAG} -t ${IMAGE_NAME}
  #docker buildx build . --build-arg QEMUVER=${DOCKER_TAG} -t ${IMAGE_NAME}
  #docker buildx build --tag ${IMAGE_NAME} .
  docker build --tag ${IMAGE_NAME} . || docker build .
else
  #docker build . --build-arg NODE_VERSION=${NODE_VERSION} -t ${IMAGE_NAME}
  #docker build . --build-arg QEMUVER=${DOCKER_TAG} -t ${IMAGE_NAME}
  #docker buildx build . --build-arg QEMUVER=${DOCKER_TAG} -t ${IMAGE_NAME}
  #docker buildx build . -t ${IMAGE_NAME}
  #docker buildx build --tag ${IMAGE_NAME} .
  docker build --tag ${IMAGE_NAME} . || docker build .
fi
